#!/usr/bin/env python3
"""
Script de pruebas para la API de Cat√°logo de Pel√≠culas
Ejecutar despu√©s de que la API est√© corriendo con docker-compose up
"""

import requests
import json
import time

# URL base de la API
BASE_URL = "http://localhost:5000"

def test_health():
    """Probar el endpoint de salud"""
    print("üîç Probando endpoint de salud...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        print(f"Status: {response.status_code}")
        print(f"Response: {response.json()}")
        print("‚úÖ Endpoint de salud funcionando\n")
    except Exception as e:
        print(f"‚ùå Error en endpoint de salud: {e}\n")

def test_get_all_movies():
    """Probar GET /peliculas"""
    print("üîç Probando GET /peliculas (obtener todas las pel√≠culas)...")
    try:
        response = requests.get(f"{BASE_URL}/peliculas")
        print(f"Status: {response.status_code}")
        data = response.json()
        print(f"Total de pel√≠culas: {data.get('total', 0)}")
        if data.get('success') and data.get('data'):
            print(f"Primera pel√≠cula: {data['data'][0]['nombre']}")
        print("‚úÖ GET /peliculas funcionando\n")
        return True
    except Exception as e:
        print(f"‚ùå Error en GET /peliculas: {e}\n")
        return False
    
def test_get_top_movies():
    """Probar GET /peliculas/top"""
    print("\nüîç Probando GET /peliculas/top (top 5 mejor calificadas)...")
    try:
        response = requests.get(f"{BASE_URL}/peliculas/top")
        print(f"Status: {response.status_code}")
        data = response.json()
        if data.get('success'):
            print(f"Se obtuvieron {data['total']} pel√≠culas del top correctamente ‚úÖ")
            if data['data']:
                print(f"Mejor calificada: {data['data'][0]['nombre']} ({data['data'][0]['calificacion']})")
            return True
        else:
            print(f"‚ùå Error: {data}")
            return False
    except Exception as e:
        print(f"‚ùå Error en GET /peliculas/top: {e}")
        return False


def test_get_movie_by_id():
    """Probar GET /peliculas/{id}"""
    print("üîç Probando GET /peliculas/1 (obtener pel√≠cula por ID)...")
    try:
        response = requests.get(f"{BASE_URL}/peliculas/1")
        print(f"Status: {response.status_code}")
        data = response.json()
        if data.get('success'):
            print(f"Pel√≠cula encontrada: {data['data']['nombre']}")
            print("‚úÖ GET /peliculas/{id} funcionando\n")
            return True
        else:
            print(f"‚ùå Error: {data}\n")
            return False
    except Exception as e:
        print(f"‚ùå Error en GET /peliculas/1: {e}\n")
        return False

def test_create_movie():
    """Probar POST /peliculas"""
    print("üîç Probando POST /peliculas (crear nueva pel√≠cula)...")
    try:
        nueva_pelicula = {
            "nombre": "Inception",
            "categoria": "Ciencia Ficci√≥n",
            "a√±o": 2010,
            "director": "Christopher Nolan",
            "duracion": 148,
            "calificacion": 8.8
        }
        
        response = requests.post(
            f"{BASE_URL}/peliculas",
            json=nueva_pelicula,
            headers={'Content-Type': 'application/json'}
        )
        print(f"Status: {response.status_code}")
        data = response.json()
        
        if data.get('success'):
            print(f"Pel√≠cula creada: {data['data']['nombre']} (ID: {data['data']['id']})")
            print("‚úÖ POST /peliculas funcionando\n")
            return data['data']['id']
        else:
            print(f"‚ùå Error: {data}\n")
            return None
    except Exception as e:
        print(f"‚ùå Error en POST /peliculas: {e}\n")
        return None

def test_update_movie(movie_id):
    """Probar PUT /peliculas/{id}"""
    print(f"üîç Probando PUT /peliculas/{movie_id} (actualizar pel√≠cula)...")
    try:
        actualizacion = {
            "calificacion": 9.0,
            "duracion": 150
        }
        
        response = requests.put(
            f"{BASE_URL}/peliculas/{movie_id}",
            json=actualizacion,
            headers={'Content-Type': 'application/json'}
        )
        print(f"Status: {response.status_code}")
        data = response.json()
        
        if data.get('success'):
            print(f"Pel√≠cula actualizada: {data['data']['nombre']}")
            print(f"Nueva calificaci√≥n: {data['data']['calificacion']}")
            print("‚úÖ PUT /peliculas/{id} funcionando\n")
            return True
        else:
            print(f"‚ùå Error: {data}\n")
            return False
    except Exception as e:
        print(f"‚ùå Error en PUT /peliculas/{movie_id}: {e}\n")
        return False

def test_delete_movie(movie_id):
    """Probar DELETE /peliculas/{id}"""
    print(f"üîç Probando DELETE /peliculas/{movie_id} (eliminar pel√≠cula)...")
    try:
        response = requests.delete(f"{BASE_URL}/peliculas/{movie_id}")
        print(f"Status: {response.status_code}")
        data = response.json()
        
        if data.get('success'):
            print("Pel√≠cula eliminada exitosamente")
            print("‚úÖ DELETE /peliculas/{id} funcionando\n")
            return True
        else:
            print(f"‚ùå Error: {data}\n")
            return False
    except Exception as e:
        print(f"‚ùå Error en DELETE /peliculas/{movie_id}: {e}\n")
        return False

def test_invalid_requests():
    """Probar casos de error"""
    print("üîç Probando casos de error...")
    
    # Pel√≠cula no encontrada
    print("- Probando pel√≠cula no encontrada...")
    response = requests.get(f"{BASE_URL}/peliculas/9999")
    print(f"  Status: {response.status_code} (esperado: 404)")
    
    # Datos inv√°lidos
    print("- Probando datos inv√°lidos...")
    pelicula_invalida = {
        "nombre": "",  # Nombre vac√≠o
        "a√±o": "no_es_numero"  # A√±o inv√°lido
    }
    response = requests.post(
        f"{BASE_URL}/peliculas",
        json=pelicula_invalida,
        headers={'Content-Type': 'application/json'}
    )
    print(f"  Status: {response.status_code} (esperado: 400)")
    
    # Endpoint no existente
    print("- Probando endpoint no existente...")
    response = requests.get(f"{BASE_URL}/no_existe")
    print(f"  Status: {response.status_code} (esperado: 404)")
    
    print("‚úÖ Pruebas de casos de error completadas\n")

def main():
    """Ejecutar todas las pruebas"""
    print("üöÄ Iniciando pruebas de la API de Cat√°logo de Pel√≠culas")
    print("=" * 60)
    
    # Esperar un poco para que la API est√© lista
    print("‚è≥ Esperando que la API est√© lista...")
    time.sleep(2)
    
    # Ejecutar pruebas
    test_health()
    
    if test_get_all_movies():
        test_get_top_movies()
        test_get_movie_by_id()

        
        # Crear, actualizar y eliminar pel√≠cula
        movie_id = test_create_movie()
        if movie_id:
            test_update_movie(movie_id)
            test_delete_movie(movie_id)
        
        # Probar casos de error
        test_invalid_requests()
        
        print("üéâ ¬°Todas las pruebas completadas!")
        print("üìä La API est√° funcionando correctamente con todas las operaciones CRUD")
    else:
        print("‚ùå No se pudieron ejecutar todas las pruebas debido a errores iniciales")

if __name__ == "__main__":
    main()

    